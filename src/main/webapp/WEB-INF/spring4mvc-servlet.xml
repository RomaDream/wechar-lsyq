<?xml version="1.0" encoding="UTF-8"?>  
<beans xmlns="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:mvc="http://www.springframework.org/schema/mvc"
       xmlns:cache="http://www.springframework.org/schema/cache"
       xmlns:task="http://www.springframework.org/schema/task"
       xsi:schemaLocation="http://www.springframework.org/schema/beans 
       						http://www.springframework.org/schema/beans/spring-beans-4.0.xsd 
							http://www.springframework.org/schema/context 
							http://www.springframework.org/schema/context/spring-context.xsd 
							http://www.springframework.org/schema/aop 
							http://www.springframework.org/schema/aop/spring-aop-4.0.xsd
							http://www.springframework.org/schema/mvc 
							http://www.springframework.org/schema/mvc/spring-mvc.xsd 
							http://www.springframework.org/schema/cache 
							http://www.springframework.org/schema/cache/spring-cache.xsd
							http://www.springframework.org/schema/task 
					        http://www.springframework.org/schema/task/spring-task-4.0.xsd">
		<!-- 启用spring mvc注解 -->
	   	<mvc:annotation-driven>
			<!-- 启动JSON格式的配置 -->
	   		<mvc:message-converters>
		   		<!-- 这里也可以自己定制class -->
		        <bean class="com.alibaba.fastjson.support.spring.FastJsonHttpMessageConverter">
		            <property name="supportedMediaTypes">
		                <list>
		                    <value>text/html;charset=UTF-8</value> <!-- 避免IE出现下载JSON文件的情况 -->
		                </list>
		            </property>
		        </bean>
	    	</mvc:message-converters>
	   	</mvc:annotation-driven>
		
		<!-- 自动扫描的包名 ，使Spring支持自动检测组件，如注解的Controller -->
   		<context:component-scan base-package="com.nk"/>	
   		
   		<mvc:default-servlet-handler/>
   		
   		<!-- 视图解析器:定义跳转的文件的前后缀 -->
	    <bean id="viewResolver" class="org.springframework.web.servlet.view.InternalResourceViewResolver">
	        <property name="prefix" value="/WEB-INF/jsp/" />
	        <property name="suffix" value=".jsp" /> <!-- 可为空,方便实现自已的依据扩展名来选择视图解释类的逻辑  -->
	    </bean>
   			
   		<!-- 缓存配置(两种) -->
	    <!-- 启用缓存注解功能(请将其配置在Spring主配置文件中) -->
	    <cache:annotation-driven cache-manager="cacheManager"/>
	    <!-- Spring自己的基于java.util.concurrent.ConcurrentHashMap实现的缓存管理器(该功能是从Spring3.1开始提供的) -->
	    <!--
	    <bean id="cacheManager" class="org.springframework.cache.support.SimpleCacheManager">
	        <property name="caches">
	            <set>
	                <bean name="myCache" class="org.springframework.cache.concurrent.ConcurrentMapCacheFactoryBean"/>
	            </set>
	        </property>
	    </bean>
	    -->
	    <!-- 若只想使用Spring自身提供的缓存器,则注释掉下面的两个关于Ehcache配置的bean,并启用上面的SimpleCacheManager即可 -->
	    <!-- Spring提供的基于的Ehcache实现的缓存管理器 -->
	    <bean id="cacheManagerFactory" class="org.springframework.cache.ehcache.EhCacheManagerFactoryBean">
	        <property name="configLocation" value="classpath:ehcache.xml"/>
	    </bean>
	    <bean id="cacheManager" class="org.springframework.cache.ehcache.EhCacheCacheManager">
	        <property name="cacheManager" ref="cacheManagerFactory"/>
	    </bean>
	    
	    <!-- 注意：红字标识的地方，如果用"ResourceBundleMessageSource"是不可以加载到资源文件的，而采用“ReloadableResourceBundleMessageSource”则可以。原因,网上有说是：(
		ResourceBundleMessageSource从classloader中加载资源文件,所以我一直帮资源文件打进jar包,没有问题,可以找到
		ReloadableResourceBundleMessageSource加载时,默认使用DefaultResourceLoader,他会 先判断资源path是否带有classpath:前缀,如果有,用ClassPathResource去加载资源文件,如果没有试着用文件协议的url去 访问,再没有就在contextPath即WEB-INF下查找(这里还有一个问题,如果你的war包,没有被app server完全解开,那有可能访问不到)。)Reloadable方式，
		是可以在不重启系统的情况下重新加载资源文件的。要指定 <property name="cacheSeconds" value="3600"/>也就是说，系统每隔1小时就会重新加载资源文件。如value=-1就是永不自动加载 -->
	    <bean id="messageSource" class="org.springframework.context.support.ReloadableResourceBundleMessageSource">
	        <property name="basenames">
	        <list>
	            <value>/WEB-INF/messages/message</value>
	            <value>/WEB-INF/messages/sysmessage</value>
	        </list>
	        </property>
	        <property name="cacheSeconds" value="3600"/>
	        <property name="useCodeAsDefaultMessage" value="true" />
	    </bean>
	   
	    <!-- *添加配置拦截器*    国际化操作 拦截器 必需配置，可以和其它国际化方式通用(这个配置，是不论请求级别的国际化，还是Cookie级别的国际化，再或者Session级别的国际化，都必需有配置这个拦截器 ，否则会不能使用。) -->
	    <bean id="localeChangeInterceptor" class="org.springframework.web.servlet.i18n.LocaleChangeInterceptor"/>
	    <!-- *设置拦截器*   基于request的拦截器,将拦截器注入到你的UrlHandlerMapping中  -->
	    <!-- 注意请求参数为locale，例如locale=zh_CN,  在controller里面获取资源文件的时候, 注意使用RequestContextUtils.getLocale(request)替代request.getLocale()获取locale信息. -->
	    <bean id="defaultUrlMapping" class="org.springframework.web.servlet.handler.BeanNameUrlHandlerMapping">
	        <property name="interceptors" ref="localeChangeInterceptor"/>
	        <property name="order">
	            <value>1</value>
	        </property>
	    </bean>
	    <bean id="localeResolver" class="org.springframework.web.servlet.i18n.AcceptHeaderLocaleResolver"/>
	    
	    <!--  
	    <aop:aspectj-autoproxy proxy-target-class="true"></aop:aspectj-autoproxy>
	    -->
	    
		<!-- 配置拦截器, 多个拦截器,顺序执行,当设置多个拦截器时，先按顺序调用preHandle方法，然后逆序调用每个拦截器的postHandle和afterCompletion方法  -->
		<!-- 
			/**的意思是所有文件夹及里面的子文件夹
			/*是所有文件夹，不含子文件夹
			/是web项目的根目录 
		<mvc:interceptors>
			<mvc:interceptor>
				<mvc:mapping path="/" />
				<mvc:mapping path="/user/**" />
				<mvc:mapping path="/test/**" />
				<bean class="com.nk.interceptor.CommonInterceptor"></bean>
			</mvc:interceptor>
		</mvc:interceptors>
		-->
		
		<!-- SpringMVC上传文件配置 -->
		<bean id="multipartResolver" class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
			<property name="defaultEncoding" value="UTF-8"/>
			<property name="maxUploadSize" value="10000000"/>
			<property name="resolveLazily" value="true"/>
		</bean>     
		
		<task:annotation-driven/>   
</beans>